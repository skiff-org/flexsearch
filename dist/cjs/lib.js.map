{"version":3,"file":"lib.js","sources":["../../src/common.js","../../src/lang.js","../../src/lang/latin/default.js","../../src/async.js","../../src/intersect.js","../../src/cache.js","../../src/index.js","../../src/document.js"],"sourcesContent":["export function parse_option(value, default_value){\n  return typeof value !== 'undefined' ? value : default_value;\n}\n\n/**\n * @param {!number} count\n * @returns {Array<Object>}\n */\n\nexport function create_object_array(count){\n  const array = new Array(count);\n\n  for(let i = 0; i < count; i++){\n    array[i] = create_object();\n  }\n\n  return array;\n}\n\nexport function create_arrays(count){\n  const array = new Array(count);\n\n  for(let i = 0; i < count; i++){\n    array[i] = [];\n  }\n\n  return array;\n}\n\n/**\n * @param {!Object} obj\n * @returns {Array<string>}\n */\n\nexport function get_keys(obj){\n  return Object.keys(obj);\n}\n\nexport function create_object(){\n  return Object.create(null);\n}\n\nexport function concat(arrays){\n  return [].concat.apply([], arrays);\n}\n\nexport function sort_by_length_down(a, b){\n  return b.length - a.length;\n}\n\nexport function is_array(val){\n  return val.constructor === Array;\n}\n\nexport function is_string(val){\n  return typeof val === 'string';\n}\n\nexport function is_object(val){\n  return typeof val === 'object';\n}\n\nexport function is_function(val){\n  return typeof val === 'function';\n}\n","import { create_object, get_keys } from './common.js';\n\n/**\n * @param {!string} str\n * @param {boolean|Array<string|RegExp>=} normalize\n * @param {boolean|string|RegExp=} split\n * @param {boolean=} _collapse\n * @returns {string|Array<string>}\n * @this IndexInterface\n */\n\nexport function pipeline(str, normalize, split, _collapse){\n  if(str){\n    if(normalize){\n      str = replace(str, /** @type {Array<string|RegExp>} */ (normalize));\n    }\n\n    if(this.matcher){\n      str = replace(str, this.matcher);\n    }\n\n    if(this.stemmer && (str.length > 1)){\n      str = replace(str, this.stemmer);\n    }\n\n    if(_collapse && (str.length > 1)){\n      str = collapse(str);\n    }\n\n    if(split || (split === '')){\n      const words = str.split(/** @type {string|RegExp} */ (split));\n\n      return this.filter ? filter(words, this.filter) : words;\n    }\n  }\n\n  return str;\n}\n\nexport const regex_whitespace = /[\\p{Z}\\p{S}\\p{P}\\p{C}]+/u;\nconst regex_normalize = /[\\u0300-\\u036f]/g;\n\nexport function normalize(str){\n  if(str.normalize){\n    str = str.normalize('NFD').replace(regex_normalize, '');\n  }\n\n  return str;\n}\n\n/**\n * @param {!string} str\n * @param {boolean|Array<string|RegExp>=} normalize\n * @param {boolean|string|RegExp=} split\n * @param {boolean=} _collapse\n * @returns {string|Array<string>}\n */\n\n// FlexSearch.prototype.pipeline = function(str, normalize, split, _collapse){\n//\n//     if(str){\n//\n//         if(normalize && str){\n//\n//             str = replace(str, /** @type {Array<string|RegExp>} */ (normalize));\n//         }\n//\n//         if(str && this.matcher){\n//\n//             str = replace(str, this.matcher);\n//         }\n//\n//         if(this.stemmer && str.length > 1){\n//\n//             str = replace(str, this.stemmer);\n//         }\n//\n//         if(_collapse && str.length > 1){\n//\n//             str = collapse(str);\n//         }\n//\n//         if(str){\n//\n//             if(split || (split === \"\")){\n//\n//                 const words = str.split(/** @type {string|RegExp} */ (split));\n//\n//                 return this.filter ? filter(words, this.filter) : words;\n//             }\n//         }\n//     }\n//\n//     return str;\n// };\n\n// export function pipeline(str, normalize, matcher, stemmer, split, _filter, _collapse){\n//\n//     if(str){\n//\n//         if(normalize && str){\n//\n//             str = replace(str, normalize);\n//         }\n//\n//         if(matcher && str){\n//\n//             str = replace(str, matcher);\n//         }\n//\n//         if(stemmer && str.length > 1){\n//\n//             str = replace(str, stemmer);\n//         }\n//\n//         if(_collapse && str.length > 1){\n//\n//             str = collapse(str);\n//         }\n//\n//         if(str){\n//\n//             if(split !== false){\n//\n//                 str = str.split(split);\n//\n//                 if(_filter){\n//\n//                     str = filter(str, _filter);\n//                 }\n//             }\n//         }\n//     }\n//\n//     return str;\n// }\n\n\n/**\n * @param {Array<string>} words\n * @returns {Object<string, string>}\n */\n\nexport function init_filter(words){\n  const filter = create_object();\n\n  for(let i = 0, length = words.length; i < length; i++){\n    filter[words[i]] = 1;\n  }\n\n  return filter;\n}\n\n/**\n * @param {!Object<string, string>} obj\n * @param {boolean} is_stemmer\n * @returns {Array}\n */\n\nexport function init_stemmer_or_matcher(obj, is_stemmer){\n  const keys = get_keys(obj);\n  const length = keys.length;\n  const final = [];\n\n  let removal = '', count = 0;\n\n  for(let i = 0, key, tmp; i < length; i++){\n    key = keys[i];\n    tmp = obj[key];\n\n    if(tmp){\n      final[count++] = regex(is_stemmer ? '(?!\\\\b)' + key + '(\\\\b|_)' : key);\n      final[count++] = tmp;\n    }\n    else{\n      removal += (removal ? '|' : '') + key;\n    }\n  }\n\n  if(removal){\n    final[count++] = regex(is_stemmer ? '(?!\\\\b)(' + removal + ')(\\\\b|_)' : '(' + removal + ')');\n    final[count] = '';\n  }\n\n  return final;\n}\n\n\n/**\n * @param {!string} str\n * @param {Array} regexp\n * @returns {string}\n */\n\nexport function replace(str, regexp){\n  for(let i = 0, len = regexp.length; i < len; i += 2){\n    str = str.replace(regexp[i], regexp[i + 1]);\n\n    if(!str){\n      break;\n    }\n  }\n\n  return str;\n}\n\n/**\n * @param {!string} str\n * @returns {RegExp}\n */\n\nexport function regex(str){\n  return new RegExp(str, 'g');\n}\n\n/**\n * Regex: replace(/(?:(\\w)(?:\\1)*)/g, \"$1\")\n * @param {!string} string\n * @returns {string}\n */\n\nexport function collapse(string){\n  let final = '', prev = '';\n\n  for(let i = 0, len = string.length, char; i < len; i++){\n    if((char = string[i]) !== prev){\n      final += (prev = char);\n    }\n  }\n\n  return final;\n}\n\n// TODO using fast-swap\nexport function filter(words, map){\n  const length = words.length;\n  const filtered = [];\n\n  for(let i = 0, count = 0; i < length; i++){\n    const word = words[i];\n\n    if(word && !map[word]){\n      filtered[count++] = word;\n    }\n  }\n\n  return filtered;\n}\n\n// const chars = {a:1, e:1, i:1, o:1, u:1, y:1};\n//\n// function collapse_repeating_chars(string){\n//\n//     let collapsed_string = \"\",\n//         char_prev = \"\",\n//         char_next = \"\";\n//\n//     for(let i = 0; i < string.length; i++){\n//\n//         const char = string[i];\n//\n//         if(char !== char_prev){\n//\n//             if(i && (char === \"h\")){\n//\n//                 if((chars[char_prev] && chars[char_next]) || (char_prev === \" \")){\n//\n//                     collapsed_string += char;\n//                 }\n//             }\n//             else{\n//\n//                 collapsed_string += char;\n//             }\n//         }\n//\n//         char_next = (\n//\n//             (i === (string.length - 1)) ?\n//\n//                 \"\"\n//             :\n//                 string[i + 1]\n//         );\n//\n//         char_prev = char;\n//     }\n//\n//     return collapsed_string;\n// }\n","import { pipeline, regex_whitespace } from '../../lang.js';\n\nexport const rtl = false;\nexport const tokenize = '';\nexport default {\n  encode: encode,\n  rtl: rtl,\n  tokenize: tokenize\n};\n\n/**\n * @this IndexInterface\n */\n\nexport function encode(str){\n  return pipeline.call(\n\n    this,\n    /* string: */ ('' + str).toLowerCase(),\n    /* normalize: */ false,\n    /* split: */ regex_whitespace,\n    /* collapse: */ false\n  );\n}\n","//import { promise as Promise } from \"./polyfill.js\";\nimport { is_function } from './common.js';\n\nexport default function(prototype){\n  register(prototype, 'add');\n  register(prototype, 'append');\n  register(prototype, 'search');\n  register(prototype, 'update');\n  register(prototype, 'remove');\n}\n\nfunction register(prototype, key){\n  prototype[key + 'Async'] = function(){\n    /** @type {IndexInterface|DocumentInterface} */\n    const self = this;\n    const args = /*[].slice.call*/(arguments);\n    const arg = args[args.length - 1];\n    let callback;\n\n    if(is_function(arg)){\n      callback = arg;\n      delete args[args.length - 1];\n    }\n\n    const promise = new Promise(function(resolve){\n      setTimeout(function(){\n        self.async = true;\n        const res = self[key].apply(self, args);\n        self.async = false;\n        resolve(res);\n      });\n    });\n\n    if(callback){\n      promise.then(callback);\n      return this;\n    }\n    else{\n      return promise;\n    }\n  };\n}\n","import { create_object } from './common.js';\n\n/**\n * Implementation based on Array.indexOf() provides better performance,\n * but it needs at least one word in the query which is less frequent.\n * Also on large indexes it does not scale well performance-wise.\n * This strategy also lacks of suggestion capabilities (matching & sorting).\n *\n * @param arrays\n * @param limit\n * @param offset\n * @param {boolean|Array=} suggest\n * @returns {Array}\n */\n\n// export function intersect(arrays, limit, offset, suggest) {\n//\n//     const length = arrays.length;\n//     let result = [];\n//     let check;\n//\n//     // determine shortest array and collect results\n//     // from the sparse relevance arrays\n//\n//     let smallest_size;\n//     let smallest_arr;\n//     let smallest_index;\n//\n//     for(let x = 0; x < length; x++){\n//\n//         const arr = arrays[x];\n//         const len = arr.length;\n//\n//         let size = 0;\n//\n//         for(let y = 0, tmp; y < len; y++){\n//\n//             tmp = arr[y];\n//\n//             if(tmp){\n//\n//                 size += tmp.length;\n//             }\n//         }\n//\n//         if(!smallest_size || (size < smallest_size)){\n//\n//             smallest_size = size;\n//             smallest_arr = arr;\n//             smallest_index = x;\n//         }\n//     }\n//\n//     smallest_arr = smallest_arr.length === 1 ?\n//\n//         smallest_arr[0]\n//     :\n//         concat(smallest_arr);\n//\n//     if(suggest){\n//\n//         suggest = [smallest_arr];\n//         check = create_object();\n//     }\n//\n//     let size = 0;\n//     let steps = 0;\n//\n//     // process terms in reversed order often results in better performance.\n//     // the outer loop must be the words array, using the\n//     // smallest array here disables the \"fast fail\" optimization.\n//\n//     for(let x = length - 1; x >= 0; x--){\n//\n//         if(x !== smallest_index){\n//\n//             steps++;\n//\n//             const word_arr = arrays[x];\n//             const word_arr_len = word_arr.length;\n//             const new_arr = [];\n//\n//             let count = 0;\n//\n//             for(let z = 0, id; z < smallest_arr.length; z++){\n//\n//                 id = smallest_arr[z];\n//\n//                 let found;\n//\n//                 // process relevance in forward order (direction is\n//                 // important for adding IDs during the last round)\n//\n//                 for(let y = 0; y < word_arr_len; y++){\n//\n//                     const arr = word_arr[y];\n//\n//                     if(arr.length){\n//\n//                         found = arr.indexOf(id) !== -1;\n//\n//                         if(found){\n//\n//                             // check if in last round\n//\n//                             if(steps === length - 1){\n//\n//                                 if(offset){\n//\n//                                     offset--;\n//                                 }\n//                                 else{\n//\n//                                     result[size++] = id;\n//\n//                                     if(size === limit){\n//\n//                                         // fast path \"end reached\"\n//\n//                                         return result;\n//                                     }\n//                                 }\n//\n//                                 if(suggest){\n//\n//                                     check[id] = 1;\n//                                 }\n//                             }\n//\n//                             break;\n//                         }\n//                     }\n//                 }\n//\n//                 if(found){\n//\n//                     new_arr[count++] = id;\n//                 }\n//             }\n//\n//             if(suggest){\n//\n//                 suggest[steps] = new_arr;\n//             }\n//             else if(!count){\n//\n//                 return [];\n//             }\n//\n//             smallest_arr = new_arr;\n//         }\n//     }\n//\n//     if(suggest){\n//\n//         // needs to iterate in reverse direction\n//\n//         for(let x = suggest.length - 1, arr, len; x >= 0; x--){\n//\n//             arr = suggest[x];\n//             len = arr && arr.length;\n//\n//             if(len){\n//\n//                 for(let y = 0, id; y < len; y++){\n//\n//                     id = arr[y];\n//\n//                     if(!check[id]){\n//\n//                         check[id] = 1;\n//\n//                         if(offset){\n//\n//                             offset--;\n//                         }\n//                         else{\n//\n//                             result[size++] = id;\n//\n//                             if(size === limit){\n//\n//                                 // fast path \"end reached\"\n//\n//                                 return result;\n//                             }\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//\n//     return result;\n// }\n\n/**\n * Implementation based on Object[key] provides better suggestions\n * capabilities and has less performance scaling issues on large indexes.\n *\n * @param arrays\n * @param limit\n * @param offset\n * @param {boolean|Array=} suggest\n * @returns {Array}\n */\n\nexport function intersect(arrays, limit, offset, suggest) {\n  const length = arrays.length;\n  let result = [];\n  let check;\n  let check_suggest;\n  let size = 0;\n\n  if(suggest){\n    suggest = [];\n  }\n\n  // process terms in reversed order often has advantage for the fast path \"end reached\".\n  // also a reversed order prioritize the order of words from a query.\n\n  for(let x = length - 1; x >= 0; x--){\n    const word_arr = arrays[x];\n    const word_arr_len = word_arr.length;\n    const check_new = create_object();\n\n    let found = !check;\n\n    // process relevance in forward order (direction is\n    // important for adding IDs during the last round)\n\n    for(let y = 0; y < word_arr_len; y++){\n      const arr = word_arr[y];\n      const arr_len = arr.length;\n\n      if(arr_len){\n        // loop through IDs\n\n        for(let z = 0, check_idx, id; z < arr_len; z++){\n          id = arr[z];\n\n          if(check){\n            if(check[id]){\n              // check if in last round\n\n              if(!x){\n                if(offset){\n                  offset--;\n                }\n                else{\n                  result[size++] = id;\n\n                  if(size === limit){\n                    // fast path \"end reached\"\n\n                    return result;\n                  }\n                }\n              }\n\n              if(x || suggest){\n                check_new[id] = 1;\n              }\n\n              found = true;\n            }\n\n            if(suggest){\n              check_idx = check_suggest[id];\n              check_suggest[id] = check_idx ? ++check_idx : check_idx = 1;\n\n              // do not adding IDs which are already included in the result (saves one loop)\n              // the first intersection match has the check index 2, so shift by -2\n\n              if(check_idx < length){\n                const tmp = suggest[check_idx - 2] || (suggest[check_idx - 2] = []);\n                tmp[tmp.length] = id;\n              }\n            }\n          }\n          else{\n            // pre-fill in first round\n\n            check_new[id] = 1;\n          }\n        }\n      }\n    }\n\n    if(suggest){\n      // re-use the first pre-filled check for suggestions\n\n      check || (check_suggest = check_new);\n    }\n    else if(!found){\n      return [];\n    }\n\n    check = check_new;\n  }\n\n  if(suggest){\n    // needs to iterate in reverse direction\n\n    for(let x = suggest.length - 1, arr, len; x >= 0; x--){\n      arr = suggest[x];\n      len = arr.length;\n\n      for(let y = 0, id; y < len; y++){\n        id = arr[y];\n\n        if(!check[id]){\n          if(offset){\n            offset--;\n          }\n          else{\n            result[size++] = id;\n\n            if(size === limit){\n              // fast path \"end reached\"\n\n              return result;\n            }\n          }\n\n          check[id] = 1;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * @param mandatory\n * @param arrays\n * @returns {Array}\n */\n\nexport function intersect_union(mandatory, arrays) {\n  const check = create_object();\n  const union = create_object();\n  const result = [];\n\n  for(let x = 0; x < mandatory.length; x++){\n    check[mandatory[x]] = 1;\n  }\n\n  for(let x = 0, arr; x <  arrays.length; x++){\n    arr = arrays[x];\n\n    for(let y = 0, id; y < arr.length; y++){\n      id = arr[y];\n\n      if(check[id]){\n        if(!union[id]){\n          union[id] = 1;\n          result[result.length] = id;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n","import { create_object, is_object } from './common.js';\n\n/**\n * @param {boolean|number=} limit\n * @constructor\n */\n\nfunction CacheClass(limit){\n  /** @private */\n  this.limit = (limit !== true) && limit;\n\n  /** @private */\n  this.cache = create_object();\n\n  /** @private */\n  this.queue = [];\n\n  //this.clear();\n}\n\nexport default CacheClass;\n\n/**\n * @param {string|Object} query\n * @param {number|Object=} limit\n * @param {Object=} options\n * @this {IndexInterface}\n * @returns {Array<number|string>}\n */\n\nexport function searchCache(query, limit, options){\n  if(is_object(query)){\n    query = query.query;\n  }\n\n  let cache = this.cache.get(query);\n\n  if(!cache){\n    cache = this.search(query, limit, options);\n    this.cache.set(query, cache);\n  }\n\n  return cache;\n}\n\n// CacheClass.prototype.clear = function(){\n//\n//     /** @private */\n//     this.cache = create_object();\n//\n//     /** @private */\n//     this.queue = [];\n// };\n\nCacheClass.prototype.set = function(key, value){\n  if(!this.cache[key]){\n    // it is just a shame that native function array.shift() performs so bad\n\n    // const length = this.queue.length;\n    //\n    // this.queue[length] = key;\n    //\n    // if(length === this.limit){\n    //\n    //     delete this.cache[this.queue.shift()];\n    // }\n\n    // the same bad performance\n\n    // this.queue.unshift(key);\n    //\n    // if(this.queue.length === this.limit){\n    //\n    //     this.queue.pop();\n    // }\n\n    // fast implementation variant\n\n    // let length = this.queue.length;\n    //\n    // if(length === this.limit){\n    //\n    //     length--;\n    //\n    //     delete this.cache[this.queue[0]];\n    //\n    //     for(let x = 0; x < length; x++){\n    //\n    //         this.queue[x] = this.queue[x + 1];\n    //     }\n    // }\n    //\n    // this.queue[length] = key;\n\n    // current fastest implementation variant\n    // theoretically that should not perform better compared to the example above\n\n    let length = this.queue.length;\n\n    if(length === this.limit){\n      delete this.cache[this.queue[length - 1]];\n    }\n    else{\n      length++;\n    }\n\n    for(let x = length - 1; x > 0; x--){\n      this.queue[x] = this.queue[x - 1];\n    }\n\n    this.queue[0] = key;\n  }\n\n  this.cache[key] = value;\n};\n\nCacheClass.prototype.get = function(key){\n  const cache = this.cache[key];\n\n  if(this.limit && cache){\n    // probably the indexOf() method performs faster when matched content is on front (left-to-right)\n    // using lastIndexOf() does not help, it performs almost slower\n\n    const pos = this.queue.indexOf(key);\n\n    // if(pos < this.queue.length - 1){\n    //\n    //     const tmp = this.queue[pos];\n    //     this.queue[pos] = this.queue[pos + 1];\n    //     this.queue[pos + 1] = tmp;\n    // }\n\n    if(pos){\n      const tmp = this.queue[pos - 1];\n      this.queue[pos - 1] = this.queue[pos];\n      this.queue[pos] = tmp;\n    }\n  }\n\n  return cache;\n};\n\nCacheClass.prototype.del = function(id){\n  for(let i = 0, item, key; i < this.queue.length; i++){\n    key = this.queue[i];\n    item = this.cache[key];\n\n    if(item.indexOf(id) !== -1){\n      this.queue.splice(i--, 1);\n      delete this.cache[key];\n    }\n  }\n};\n","/**!\n * FlexSearch.js\n * Copyright 2018-2021 Nextapps GmbH\n * Author: Thomas Wilkerling\n * Licence: Apache-2.0\n * https://github.com/nextapps-de/flexsearch\n */\n\nimport { encode as default_encoder } from './lang/latin/default.js';\nimport { create_object, create_object_array, concat, sort_by_length_down, is_array, is_object, parse_option } from './common.js';\nimport { init_stemmer_or_matcher, init_filter } from './lang.js';\nimport apply_async from './async.js';\nimport { intersect } from './intersect.js';\nimport Cache, { searchCache } from './cache.js';\n\n/**\n * @constructor\n * @param {Object=} options\n * @return {Index}\n */\n\nexport class Index {\n  constructor(options = {}) {\n    this.encode = default_encoder;\n    this.register = create_object();\n    this.resolution = options.resolution || 9;\n    this.tokenize = options.tokenize || 'strict';\n    this.depth = options?.context?.depth;\n    this.bidirectional = parse_option(options?.context?.bidirectional, true);\n    this.optimize = parse_option(options.optimize, true);\n    this.minlength = options.minlength || 1;\n    this.boost = options.boost;\n\n    // when not using the memory strategy the score array should not pre-allocated to its full length\n    this.map = this.optimize ? create_object_array(options?.context?.resolution || 9) : create_object();\n    this.resolution_ctx = options?.context?.resolution || 1;\n    this.ctx = this.optimize ? create_object_array(options?.context?.resolution || 1) : create_object();\n    this.rtl = options.rtl;\n    this.matcher = options.matcher && init_stemmer_or_matcher(options.matcher, false);\n    this.stemmer = options.stemmer && init_stemmer_or_matcher(options.stemmer, true);\n    this.filter = options.filter && init_filter(options.filter);\n    this.cache = options.cache && new Cache(options.cache);\n  }\n  //Index.prototype.pipeline = pipeline;\n  /**\n   * @param {!number|string} id\n   * @param {!string} content\n   */\n  append(id, content) {\n    return this.add(id, content, true);\n  }\n  /**\n   * @param {!number|string} id\n   * @param {!string} content\n   * @param {boolean=} _append\n   * @param {boolean=} _skip_update\n   */\n  add(id, content, _append, _skip_update) {\n    if (content && (id || (id === 0))) {\n      if (!_skip_update && !_append && this.register[id]) {\n        return this.update(id, content);\n      }\n\n      content = this.encode(content);\n      const length = content.length;\n\n      if (length) {\n        // check context dupes to skip all contextual redundancy along a document\n        const dupes_ctx = create_object();\n        const dupes = create_object();\n        const depth = this.depth;\n        const resolution = this.resolution;\n\n        for (let i = 0; i < length; i++) {\n          let term = content[this.rtl ? length - 1 - i : i];\n          let term_length = term.length;\n\n          // skip dupes will break the context chain\n          if (term && (term_length >= this.minlength) && (depth || !dupes[term])) {\n            let score = get_score(resolution, length, i);\n            let token = '';\n\n            switch (this.tokenize) {\n            case 'full':\n\n              if (term_length > 3) {\n                for (let x = 0; x < term_length; x++) {\n                  for (let y = term_length; y > x; y--) {\n                    if ((y - x) >= this.minlength) {\n                      const partial_score = get_score(resolution, length, i, term_length, x);\n                      token = term.substring(x, y);\n                      this.push_index(dupes, token, partial_score, id, _append);\n                    }\n                  }\n                }\n\n                break;\n              }\n\n              // fallthrough to next case when term length < 4\n            case 'reverse':\n\n              // skip last round (this token exist already in \"forward\")\n              if (term_length > 2) {\n                for (let x = term_length - 1; x > 0; x--) {\n                  token = term[x] + token;\n\n                  if (token.length >= this.minlength) {\n                    const partial_score = get_score(resolution, length, i, term_length, x);\n                    this.push_index(dupes, token, partial_score, id, _append);\n                  }\n                }\n\n                token = '';\n              }\n\n              // fallthrough to next case to apply forward also\n            case 'forward':\n\n              if (term_length > 1) {\n                for (let x = 0; x < term_length; x++) {\n                  token += term[x];\n\n                  if (token.length >= this.minlength) {\n                    this.push_index(dupes, token, score, id, _append);\n                  }\n                }\n\n                break;\n              }\n\n              // fallthrough to next case when token has a length of 1\n            default:\n              // case \"strict\":\n              if (this.boost) {\n                score = Math.min((score / this.boost(content, term, i)) | 0, resolution - 1);\n              }\n\n              this.push_index(dupes, term, score, id, _append);\n\n              // context is just supported by tokenizer \"strict\"\n              if (depth) {\n                if ((length > 1) && (i < (length - 1))) {\n                  // check inner dupes to skip repeating words in the current context\n                  const dupes_inner = create_object();\n                  const resolution = this.resolution_ctx;\n                  const keyword = term;\n                  const size = Math.min(depth + 1, length - i);\n\n                  dupes_inner[keyword] = 1;\n\n                  for (let x = 1; x < size; x++) {\n                    term = content[this.rtl ? length - 1 - i - x : i + x];\n\n                    if (term && (term.length >= this.minlength) && !dupes_inner[term]) {\n                      dupes_inner[term] = 1;\n\n                      const context_score = get_score(resolution + ((length / 2) > resolution ? 0 : 1), length, i, size - 1, x - 1);\n                      const swap = this.bidirectional && (term > keyword);\n                      this.push_index(dupes_ctx, swap ? keyword : term, context_score, id, _append, swap ? term : keyword);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * @private\n   * @param dupes\n   * @param value\n   * @param score\n   * @param id\n   * @param {boolean=} append\n   * @param {string=} keyword\n   */\n  push_index(dupes, value, score, id, append, keyword) {\n    let arr = keyword ? this.ctx : this.map;\n\n    if (!dupes[value] || (keyword && !dupes[value][keyword])) {\n      if (this.optimize) {\n        arr = arr[score];\n      }\n\n      if (keyword) {\n        dupes = dupes[value] || (dupes[value] = create_object());\n        dupes[keyword] = 1;\n\n        arr = arr[keyword] || (arr[keyword] = create_object());\n      }\n      else {\n        dupes[value] = 1;\n      }\n\n      arr = arr[value] || (arr[value] = []);\n\n      if (!this.optimize) {\n        arr = arr[score] || (arr[score] = []);\n      }\n\n      if (!append || (arr.indexOf(id) === -1)) {\n        arr[arr.length] = id;\n        this.register[id] ||= [];\n        this.register[id].push(arr);\n      }\n    }\n  }\n  /**\n   * @param {string|Object} query\n   * @param {number|Object=} limit\n   * @param {Object=} options\n   * @returns {Array<number|string>}\n   */\n  search(query, limit, options) {\n    if (!options) {\n      if (!limit && is_object(query)) {\n        options = /** @type {Object} */ (query);\n        query = options.query;\n      }\n      else if (is_object(limit)) {\n        options = /** @type {Object} */ (limit);\n      }\n    }\n\n    let result = [];\n    let length;\n    let context, suggest, offset = 0;\n\n    if (options) {\n      limit = options.limit;\n      offset = options.offset || 0;\n      context = options.context;\n      suggest = options.suggest;\n    }\n\n    if (query) {\n      query = /** @type {Array} */ (this.encode(query));\n      length = query.length;\n\n      // TODO: solve this in one single loop below\n      if (length > 1) {\n        const dupes = create_object();\n        const query_new = [];\n\n        for (let i = 0, count = 0, term; i < length; i++) {\n          term = query[i];\n\n          if (term && (term.length >= this.minlength) && !dupes[term]) {\n            // this fast path just could applied when not in memory-optimized mode\n            if (!this.optimize && !suggest && !this.map[term]) {\n              // fast path \"not found\"\n              return result;\n            }\n            else {\n              query_new[count++] = term;\n              dupes[term] = 1;\n            }\n          }\n        }\n\n        query = query_new;\n        length = query.length;\n      }\n    }\n\n    if (!length) {\n      return result;\n    }\n\n    limit || (limit = 100);\n\n    let depth = this.depth && (length > 1) && (context !== false);\n    let index = 0, keyword;\n\n    if (depth) {\n      keyword = query[0];\n      index = 1;\n    }\n    else {\n      if (length > 1) {\n        query.sort(sort_by_length_down);\n      }\n    }\n\n    for (let arr, term; index < length; index++) {\n      term = query[index];\n\n      // console.log(keyword);\n      // console.log(term);\n      // console.log(\"\");\n      if (depth) {\n        arr = this.add_result(result, suggest, limit, offset, length === 2, term, keyword);\n\n        // console.log(arr);\n        // console.log(result);\n        // when suggestion enabled just forward keyword if term was found\n        // as long as the result is empty forward the pointer also\n        if (!suggest || (arr !== false) || !result.length) {\n          keyword = term;\n        }\n      }\n      else {\n        arr = this.add_result(result, suggest, limit, offset, length === 1, term);\n      }\n\n      if (arr) {\n        return /** @type {Array<number|string>} */ (arr);\n      }\n\n      // apply suggestions on last loop or fallback\n      if (suggest && (index === length - 1)) {\n        let length = result.length;\n\n        if (!length) {\n          if (depth) {\n            // fallback to non-contextual search when no result was found\n            depth = 0;\n            index = -1;\n\n            continue;\n          }\n\n          return result;\n        }\n        else if (length === 1) {\n          // fast path optimization\n          return single_result(result[0], limit, offset);\n        }\n      }\n    }\n\n    return intersect(result, limit, offset, suggest);\n  }\n  /**\n   * Returns an array when the result is done (to stop the process immediately),\n   * returns false when suggestions is enabled and no result was found,\n   * or returns nothing when a set was pushed successfully to the results\n   *\n   * @private\n   * @param {Array} result\n   * @param {Array} suggest\n   * @param {number} limit\n   * @param {number} offset\n   * @param {boolean} single_term\n   * @param {string} term\n   * @param {string=} keyword\n   * @return {Array<Array<string|number>>|boolean|undefined}\n   */\n  add_result(result, suggest, limit, offset, single_term, term, keyword) {\n    let word_arr = [];\n    let arr = keyword ? this.ctx : this.map;\n\n    if (!this.optimize) {\n      arr = get_array(arr, term, keyword, this.bidirectional);\n    }\n\n    if (arr) {\n      let count = 0;\n      const arr_len = Math.min(arr.length, keyword ? this.resolution_ctx : this.resolution);\n\n      // relevance:\n      for (let x = 0, size = 0, tmp, len; x < arr_len; x++) {\n        tmp = arr[x];\n\n        if (tmp) {\n          if (this.optimize) {\n            tmp = get_array(tmp, term, keyword, this.bidirectional);\n          }\n\n          if (offset) {\n            if (tmp && single_term) {\n              len = tmp.length;\n\n              if (len <= offset) {\n                offset -= len;\n                tmp = null;\n              }\n              else {\n                tmp = tmp.slice(offset);\n                offset = 0;\n              }\n            }\n          }\n\n          if (tmp) {\n            // keep score (sparse array):\n            //word_arr[x] = tmp;\n            // simplified score order:\n            word_arr[count++] = tmp;\n\n            if (single_term) {\n              size += tmp.length;\n\n              if (size >= limit) {\n                // fast path optimization\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (count) {\n        if (single_term) {\n          // fast path optimization\n          // offset was already applied at this point\n          return single_result(word_arr, limit, 0);\n        }\n\n        result[result.length] = word_arr;\n        return;\n      }\n    }\n\n    // return an empty array will stop the loop,\n    // to prevent stop when using suggestions return a false value\n    return !suggest && word_arr;\n  }\n  contain(id) {\n    return !!this.register[id];\n  }\n  update(id, content) {\n    return this.remove(id).add(id, content);\n  }\n  /**\n   * @param {boolean=} _skip_deletion\n   */\n  remove(id, _skip_deletion) {\n    const refs = this.register[id];\n\n    if (refs) {\n      remove_index(this.map, id, this.resolution, this.optimize);\n\n      if (this.depth) {\n        remove_index(this.ctx, id, this.resolution_ctx, this.optimize);\n      }\n\n      _skip_deletion || delete this.register[id];\n\n      if (this.cache) {\n        this.cache.del(id);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Convert `this` into an exportable object\n   */\n  serialize() {\n    return {\n      reg: this.register,\n      opt: this.optimize,\n      map: this.map,\n      ctx: this.ctx,\n      tok: this.tokenize\n    };\n  }\n\n  /**\n   * Given a string load an Index object from it\n   * @param {string} str the serialized Index object\n   */\n  static deserialize(obj, params) {\n    // TODO add extra parameter for index initialization?\n    const result = new Index(params);\n    result.optimize = obj.opt;\n    result.register = obj.reg;\n    result.map      = obj.map;\n    result.ctx      = obj.ctx;\n    result.tokenize = obj.tok;\n    return result;\n  }\n}\n\n\n\n/**\n * @param {number} resolution\n * @param {number} length\n * @param {number} i\n * @param {number=} term_length\n * @param {number=} x\n * @returns {number}\n */\n\nfunction get_score(resolution, length, i, term_length, x){\n  // console.log(\"resolution\", resolution);\n  // console.log(\"length\", length);\n  // console.log(\"term_length\", term_length);\n  // console.log(\"i\", i);\n  // console.log(\"x\", x);\n  // console.log((resolution - 1) / (length + (term_length || 0)) * (i + (x || 0)) + 1);\n\n  // the first resolution slot is reserved for the best match,\n  // when a query matches the first word(s).\n\n  // also to stretch score to the whole range of resolution, the\n  // calculation is shift by one and cut the floating point.\n  // this needs the resolution \"1\" to be handled additionally.\n\n  // do not stretch the resolution more than the term length will\n  // improve performance and memory, also it improves scoring in\n  // most cases between a short document and a long document\n\n  return i && (resolution > 1) ? (\n\n    (length + (term_length || 0)) <= resolution ?\n\n      i + (x || 0)\n      :\n      ((resolution - 1) / (length + (term_length || 0)) * (i + (x || 0)) + 1) | 0\n  ):\n    0;\n}\n\n\n\n\nfunction single_result(result, limit, offset){\n  if(result.length === 1){\n    result = result[0];\n  }\n  else{\n    result = concat(result);\n  }\n\n  return offset || (result.length > limit) ?\n\n    result.slice(offset, offset + limit)\n    :\n    result;\n}\n\nfunction get_array(arr, term, keyword, bidirectional){\n  if(keyword){\n    // the frequency of the starting letter is slightly less\n    // on the last half of the alphabet (m-z) in almost every latin language,\n    // so we sort downwards (https://en.wikipedia.org/wiki/Letter_frequency)\n\n    const swap = bidirectional && (term > keyword);\n\n    arr = arr[swap ? term : keyword];\n    arr = arr && arr[swap ? keyword : term];\n  }\n  else{\n    arr = arr[term];\n  }\n\n  return arr;\n}\n\n\n\n\n/**\n * @param map\n * @param id\n * @param res\n * @param optimize\n * @param {number=} resolution\n * @return {number}\n */\n\nfunction remove_index(map, id, res, optimize, resolution){\n  let count = 0;\n\n  if(is_array(map)){\n    // the first array is the score array in both strategies\n\n    if(!resolution){\n      resolution = Math.min(map.length, res);\n\n      for(let x = 0, arr; x < resolution; x++){\n        arr = map[x];\n\n        if(arr){\n          count = remove_index(arr, id, res, optimize, resolution);\n\n          if(!optimize && !count){\n            // when not memory optimized the score index should removed\n\n            delete map[x];\n          }\n        }\n      }\n    }\n    else{\n      const pos = map.indexOf(id);\n\n      if(pos !== -1){\n        // fast path, when length is 1 or lower then the whole field gets deleted\n\n        if(map.length > 1){\n          map.splice(pos, 1);\n          count++;\n        }\n      }\n      else{\n        count++;\n      }\n    }\n  }\n  else{\n    for(let key in map){\n      count = remove_index(map[key], id, res, optimize, resolution);\n\n      if(!count){\n        delete map[key];\n      }\n    }\n  }\n\n  return count;\n}\n\n// TODO bring all these functions into this file\nIndex.prototype.searchCache = searchCache;\napply_async(Index.prototype);\n","/**!\n * FlexSearch.js\n * Copyright 2018-2021 Nextapps GmbH\n * Author: Thomas Wilkerling\n * Licence: Apache-2.0\n * https://github.com/nextapps-de/flexsearch\n */\n\nimport { Index } from './index.js';\nimport Cache, { searchCache } from './cache.js';\nimport { create_object, is_array, is_string, is_object } from './common.js';\nimport apply_async from './async.js';\nimport { intersect, intersect_union } from './intersect.js';\n\n/**\n * @constructor\n * @implements DocumentInterface\n * @param {Object=} options\n * @return {Document}\n */\n\nexport class Document {\n  constructor(options) {\n    const document = options.document || options.doc || options;\n    let opt;\n\n    this.tree = [];\n    this.field = [];\n    this.marker = [];\n    this.register = create_object();\n    this.key = ((opt = document.key || document.id) && parse_tree(opt, this.marker)) || 'id';\n\n    this.storetree = (opt = document.store) && (opt !== true) && [];\n    this.store = opt && create_object();\n\n    this.tag = ((opt = document.tag) && parse_tree(opt, this.marker));\n    this.tagindex = opt && create_object();\n\n    this.cache = (opt = options.cache) && new Cache(opt);\n\n    // do not apply cache again for the indexes\n    options.cache = false;\n\n    this.worker = options.worker;\n\n    // this switch is used by recall of promise callbacks\n    this.async = false;\n\n    this.index = this.parse_descriptor(options, document);\n  }\n\n  /**\n   *\n   * @param id\n   * @param content\n   * @param {boolean=} _append\n   * @returns {Document|Promise}\n   */\n  add(id, content, _append) {\n    if (is_object(id)) {\n      content = id;\n      id = parse_simple(content, this.key);\n    }\n\n    if (content && (id || (id === 0))) {\n      if (!_append && this.register[id]) {\n        return this.update(id, content);\n      }\n\n      for (let i = 0, tree, field; i < this.field.length; i++) {\n        field = this.field[i];\n        tree = this.tree[i];\n\n        if (is_string(tree)) {\n          tree = [tree];\n        }\n\n        add_index(content, tree, this.marker, 0, this.index[field], id, tree[0], _append);\n      }\n\n      if (this.tag) {\n        let tag = parse_simple(content, this.tag);\n        let dupes = create_object();\n\n        if (is_string(tag)) {\n          tag = [tag];\n        }\n\n        for (let i = 0, key, arr; i < tag.length; i++) {\n          key = tag[i];\n\n          if (!dupes[key]) {\n            dupes[key] = 1;\n            arr = this.tagindex[key] || (this.tagindex[key] = []);\n\n            if (!_append || (arr.indexOf(id) === -1)) {\n              arr[arr.length] = id;\n            }\n          }\n        }\n      }\n\n      // TODO: how to handle store when appending contents?\n      if (this.store && (!_append || !this.store[id])) {\n        let store;\n\n        if (this.storetree) {\n          store = create_object();\n\n          for (let i = 0, tree; i < this.storetree.length; i++) {\n            tree = this.storetree[i];\n\n            if (is_string(tree)) {\n              store[tree] = content[tree];\n            }\n            else {\n              store_value(content, store, tree, 0, tree[0]);\n            }\n          }\n        }\n\n        this.store[id] = store || content;\n      }\n    }\n\n    return this;\n  }\n  append(id, content) {\n    return this.add(id, content, true);\n  }\n  update(id, content) {\n    return this.remove(id).add(id, content);\n  }\n  remove(id) {\n    if (is_object(id)) {\n      id = parse_simple(id, this.key);\n    }\n\n    if (this.register[id]) {\n      for (let i = 0; i < this.field.length; i++) {\n        // workers does not share the register\n        this.index[this.field[i]].remove(id, !this.worker);\n      }\n\n      if (this.tag) {\n        for (let key in this.tagindex) {\n          const tag = this.tagindex[key];\n          const pos = tag.indexOf(id);\n\n          if (pos !== -1) {\n            if (tag.length > 1) {\n              tag.splice(pos, 1);\n            }\n            else {\n              delete this.tagindex[key];\n            }\n          }\n        }\n      }\n\n      if (this.store) {\n        delete this.store[id];\n      }\n\n      delete this.register[id];\n    }\n\n    return this;\n  }\n  /**\n   * @param {!string|Object} query\n   * @param {number|Object=} limit\n   * @param {Object=} options\n   * @param {Array<Array>=} _resolve For internal use only.\n   * @returns {Promise|Array}\n   */\n  search(query, limit, options, _resolve) {\n    if (!options) {\n      if (!limit && is_object(query)) {\n        options = /** @type {Object} */ (query);\n        query = options.query;\n      }\n      else if (is_object(limit)) {\n        options = /** @type {Object} */ (limit);\n        limit = 0;\n      }\n    }\n\n    let result = [], result_field = [];\n    let pluck, enrich;\n    let field, tag, bool, offset, count = 0;\n\n    if (options) {\n      if (is_array(options)) {\n        field = options;\n        options = null;\n      }\n      else {\n        pluck = options.pluck;\n        field = pluck || options.index || options.field /*|| (is_string(options) && [options])*/;\n        tag = options.tag;\n        enrich = this.store && options.enrich;\n        bool = options.bool === 'and';\n        limit = options.limit || 100;\n        offset = options.offset || 0;\n\n        if (tag) {\n          if (is_string(tag)) {\n            tag = [tag];\n          }\n\n          // when tags is used and no query was set,\n          // then just return the tag indexes\n          if (!query) {\n            for (let i = 0, res; i < tag.length; i++) {\n              res = get_tag.call(this, tag[i], limit, offset, enrich);\n\n              if (res) {\n                result[result.length] = res;\n                count++;\n              }\n            }\n\n            return count ? result : [];\n          }\n        }\n\n        if (is_string(field)) {\n          field = [field];\n        }\n      }\n    }\n\n    field || (field = this.field);\n    bool = bool && ((field.length > 1) || (tag && (tag.length > 1)));\n\n    const promises = !_resolve && (this.worker || this.async) && [];\n\n    // TODO solve this in one loop below\n    for (let i = 0, res, key, len; i < field.length; i++) {\n      let opt;\n\n      key = field[i];\n\n      if (!is_string(key)) {\n        opt = key;\n        key = key.field;\n      }\n\n      if (promises) {\n        promises[i] = this.index[key].searchAsync(query, limit, opt || options);\n\n        // just collect and continue\n        continue;\n      }\n      else if (_resolve) {\n        res = _resolve[i];\n      }\n      else {\n        // inherit options also when search? it is just for laziness, Object.assign() has a cost\n        res = this.index[key].search(query, limit, opt || options);\n      }\n\n      len = res && res.length;\n\n      if (tag && len) {\n        const arr = [];\n        let count = 0;\n\n        if (bool) {\n          // prepare for intersection\n          arr[0] = [res];\n        }\n\n        for (let y = 0, key, res; y < tag.length; y++) {\n          key = tag[y];\n          res = this.tagindex[key];\n          len = res && res.length;\n\n          if (len) {\n            count++;\n            arr[arr.length] = bool ? [res] : res;\n          }\n        }\n\n        if (count) {\n          if (bool) {\n            res = intersect(arr, limit || 100, offset || 0);\n          }\n          else {\n            res = intersect_union(res, arr);\n          }\n\n          len = res.length;\n        }\n      }\n\n      if (len) {\n        result_field[count] = key;\n        result[count++] = res;\n      }\n      else if (bool) {\n        return [];\n      }\n    }\n\n    if (promises) {\n      const self = this;\n\n      // anyone knows a better workaround of optionally having async promises?\n      // the promise.all() needs to be wrapped into additional promise,\n      // otherwise the recursive callback wouldn't run before return\n      return new Promise(function (resolve) {\n        Promise.all(promises).then(function (result) {\n          resolve(self.search(query, limit, options, result));\n        });\n      });\n    }\n\n    if (!count) {\n      // fast path \"not found\"\n      return [];\n    }\n\n    if (pluck && (!enrich || !this.store)) {\n      // fast path optimization\n      return result[0];\n    }\n\n    for (let i = 0, res; i < result_field.length; i++) {\n      res = result[i];\n\n      if (res.length) {\n        if (enrich) {\n          res = apply_enrich.call(this, res);\n        }\n      }\n\n      if (pluck) {\n        return res;\n      }\n\n      result[i] = {\n        'field': result_field[i],\n        'result': res\n      };\n    }\n\n    return result;\n  }\n  contain(id) {\n    return !!this.register[id];\n  }\n  get(id) {\n    return this.store[id];\n  }\n  set(id, data) {\n    this.store[id] = data;\n    return this;\n  }\n\n  /**\n   * Serialize `this` into an exportable object\n   */\n  serialize() {\n    const result = {\n      tag:   this.tagIndex,\n      reg:   this.register,\n      store: this.store,\n      field: this.field,\n      index: {}\n    };\n    Object.entries(this.index).forEach(([key, index]) => {\n      result.index[key] = index.serialize();\n    });\n    return result;\n  }\n\n  /**\n   * Create a `Document` from a serialized object\n   */\n  static deserialize(obj, params) {\n    // TODO add properties here?\n    const result = new Document(params);\n    result.tagIndex = obj.tag;\n    result.register = obj.reg;\n    result.store    = obj.store;\n    result.field    = obj.field;\n    Object.entries(obj.index).forEach(([key, exportedIndex]) => {\n      result.index[key] = Index.deserialize(exportedIndex);\n      result.index[key].register = obj.reg;\n    });\n    return result;\n  }\n\n  // Helper methods\n\n  parse_descriptor(options, document) {\n    const index = create_object();\n    let field = document.index || document.field || document;\n\n    if (is_string(field)) {\n      field = [field];\n    }\n\n    for (let i = 0, key, opt; i < field.length; i++) {\n      key = field[i];\n\n      if (!is_string(key)) {\n        opt = key;\n        key = key.field;\n      }\n\n      opt = is_object(opt) ? Object.assign({}, options, opt) : options;\n\n      if (!this.worker) {\n        index[key] = new Index(opt);\n        index[key].register = this.register;\n      }\n\n      this.tree[i] = parse_tree(key, this.marker);\n      this.field[i] = key;\n    }\n\n    if (this.storetree) {\n      let store = document.store;\n\n      if (is_string(store)) {\n        store = [store];\n      }\n\n      for (let i = 0; i < store.length; i++) {\n        this.storetree[i] = parse_tree(store[i], this.marker);\n      }\n    }\n\n    return index;\n  }\n}\n\nfunction parse_tree(key, marker){\n  const tree = key.split(':');\n  let count = 0;\n\n  for(let i = 0; i < tree.length; i++){\n    key = tree[i];\n\n    if(key.indexOf('[]') >= 0){\n      key = key.substring(0, key.length - 2);\n\n      if(key){\n        marker[count] = true;\n      }\n    }\n\n    if(key){\n      tree[count++] = key;\n    }\n  }\n\n  if(count < tree.length){\n    tree.length = count;\n  }\n\n  return count > 1 ? tree : tree[0];\n}\n\nfunction parse_simple(obj, tree){\n  if(is_string(tree)){\n    obj = obj[tree];\n  }\n  else{\n    for(let i = 0; obj && (i < tree.length); i++){\n      obj = obj[tree[i]];\n    }\n  }\n\n  return obj;\n}\n\nfunction store_value(obj, store, tree, pos, key){\n  obj = obj[key];\n\n  // reached target field\n\n  if(pos === (tree.length - 1)){\n    // store target value\n\n    store[key] = obj;\n  }\n  else if(obj){\n    if(is_array(obj)){\n      store = store[key] = new Array(obj.length);\n\n      for(let i = 0; i < obj.length; i++){\n        // do not increase pos (an array is not a field)\n        store_value(obj, store, tree, pos, i);\n      }\n    }\n    else{\n      store = store[key] || (store[key] = create_object());\n      key = tree[++pos];\n\n      store_value(obj, store, tree, pos, key);\n    }\n  }\n}\n\nfunction add_index(obj, tree, marker, pos, index, id, key, _append){\n  obj = obj[key];\n\n  if(obj){\n    // reached target field\n\n    if(pos === (tree.length - 1)){\n      // handle target value\n\n      if(is_array(obj)){\n        // append array contents so each entry gets a new scoring context\n\n        if(marker[pos]){\n          for(let i = 0; i < obj.length; i++){\n            index.add(id, obj[i], /* append: */ true, /* skip update: */ true);\n          }\n\n          return;\n        }\n\n        // or join array contents and use one scoring context\n\n        obj = obj.join(' ');\n      }\n\n      index.add(id, obj, _append, /* skip_update: */ true);\n    }\n    else{\n      if(is_array(obj)){\n        for(let i = 0; i < obj.length; i++){\n          // do not increase index, an array is not a field\n\n          add_index(obj, tree, marker, pos, index, id, i, _append);\n        }\n      }\n      else{\n        key = tree[++pos];\n\n        add_index(obj, tree, marker, pos, index, id, key, _append);\n      }\n    }\n  }\n}\n\n\n\n\n\n\n/**\n * @this Document\n */\n\nfunction get_tag(key, limit, offset, enrich){\n  let res = this.tagindex[key];\n  let len = res && (res.length - offset);\n\n  if(len && (len > 0)){\n    if((len > limit) || offset){\n      res = res.slice(offset, offset + limit);\n    }\n\n    if(enrich){\n      res = apply_enrich.call(this, res);\n    }\n\n    return {\n\n      'tag': key,\n      'result': res\n    };\n  }\n}\n\n/**\n * @this Document\n */\n\nfunction apply_enrich(res){\n  const arr = new Array(res.length);\n\n  for(let x = 0, id; x < res.length; x++){\n    id = res[x];\n\n    arr[x] = {\n\n      'id': id,\n      'doc': this.store[id]\n    };\n  }\n\n  return arr;\n}\n\n// TODO move all of this into this file\nDocument.prototype.searchCache = searchCache;\napply_async(Document.prototype);\n"],"names":["default_encoder","Cache"],"mappings":"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"}